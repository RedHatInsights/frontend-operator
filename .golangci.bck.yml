linters:
  # Enable specific linter
  enable:
# https://golangci-lint.run/usage/linters/#enabled-by-default
#    - errcheck
#    - gosimple
#    - govet
#    - ineffassign
#    - staticcheck
#    - unused
    - gocritic
    - gofmt
    - goimports
    - gosec
    - revive
    - typecheck
    - bodyclose
linters-settings:
  staticcheck:
    checks:
      - all
      # Ignore usage of deprecated things, will be removed after frontend resources are using new navigation
      - '-SA1019'
  gosec:
    excludes:
      - G115
issues:
  exclude-rules:
    - path: api/v1alpha1/groupversion_info.go
      linters:
        - gofmt
        - goimports
  # Fix found issues (if it's supported by the linter).
  # Default: false
  # fix: true

  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 20
  uniq-by-line: false

output:
# The formats used to render issues.
# Formats:
# - `colored-line-number`
# - `line-number`
# - `json`
# - `colored-tab`
# - `tab`
# - `html`
# - `checkstyle`
# - `code-climate`
# - `junit-xml`
# - `github-actions`
# - `teamcity`
# - `sarif`
# Output path can be either `stdout`, `stderr` or path to the file to write to.
#
# For the CLI flag (`--out-format`), multiple formats can be specified by separating them by comma.
# The output can be specified for each of them by separating format name and path by colon symbol.
# Example: "--out-format=checkstyle:report.xml,json:stdout,colored-line-number"
# The CLI flag (`--out-format`) override the configuration file.
#
# Default:
#  formats:
#    - format: colored-line-number
#      path: stdout
# Print lines of code with issue.
# Default: true
#  print-issued-lines: false
# Print linter name in the end of issue text.
# Default: true
#  print-linter-name: false
# Sort results by the order defined in `sort-order`.
# Default: false
  sort-results: true
# Make issues output unique by line.
# Default: true

run:
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 5m
